/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import aaaa.HsmfUpdateData;
import aaaa.HsmfUpdateError;
import aaaa.HsmfUpdatedData;
import aaaa.PduSessionCreateData;
import aaaa.PduSessionCreateError;
import aaaa.PduSessionCreatedData;
import aaaa.ProblemDetails;
import aaaa.RedirectResponse;
import aaaa.ReleaseData;
import aaaa.ReleasedData;
import aaaa.RetrieveData;
import aaaa.RetrievedData;
import aaaa.TransferMoDataReqData;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-04-09T17:51:16.518942+09:00[Asia/Tokyo]")
@Validated
@Api(value = "pdu-sessions", description = "the pdu-sessions API")
public interface PduSessionsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /pdu-sessions : Create
     *
     * @param pduSessionCreateData representation of the PDU session to be created in the H-SMF or SMF (required)
     * @return successful creation of a PDU session (status code 201)
     *         or Temporary Redirect (status code 307)
     *         or Permanent Redirect (status code 308)
     *         or unsuccessful creation of a PDU session (status code 400)
     *         or unsuccessful creation of a PDU session (status code 403)
     *         or unsuccessful creation of a PDU session (status code 404)
     *         or Length Required (status code 411)
     *         or Payload Too Large (status code 413)
     *         or Unsupported Media Type (status code 415)
     *         or Too Many Requests (status code 429)
     *         or unsuccessful creation of a PDU session (status code 500)
     *         or unsuccessful creation of a PDU session (status code 503)
     *         or Generic Error (status code 200)
     */
    @ApiOperation(value = "Create", nickname = "postPduSessions", notes = "", response = PduSessionCreatedData.class, authorizations = {
        @Authorization(value = "oAuth2ClientCredentials", scopes = {
            @AuthorizationScope(scope = "nsmf-pdusession", description = "Access to the nsmf-pdusession API") })
         }, tags={ "PDU sessions collection", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "successful creation of a PDU session", response = PduSessionCreatedData.class),
        @ApiResponse(code = 307, message = "Temporary Redirect", response = RedirectResponse.class),
        @ApiResponse(code = 308, message = "Permanent Redirect", response = RedirectResponse.class),
        @ApiResponse(code = 400, message = "unsuccessful creation of a PDU session", response = PduSessionCreateError.class),
        @ApiResponse(code = 403, message = "unsuccessful creation of a PDU session", response = PduSessionCreateError.class),
        @ApiResponse(code = 404, message = "unsuccessful creation of a PDU session", response = PduSessionCreateError.class),
        @ApiResponse(code = 411, message = "Length Required", response = ProblemDetails.class),
        @ApiResponse(code = 413, message = "Payload Too Large", response = ProblemDetails.class),
        @ApiResponse(code = 415, message = "Unsupported Media Type", response = ProblemDetails.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = ProblemDetails.class),
        @ApiResponse(code = 500, message = "unsuccessful creation of a PDU session", response = PduSessionCreateError.class),
        @ApiResponse(code = 503, message = "unsuccessful creation of a PDU session", response = PduSessionCreateError.class),
        @ApiResponse(code = 200, message = "Generic Error") })
    @PostMapping(
        value = "/pdu-sessions",
        produces = { "application/json", "multipart/related", "application/problem+json" },
        consumes = { "application/json", "multipart/related" }
    )
    default ResponseEntity<PduSessionCreatedData> postPduSessions(@ApiParam(value = "representation of the PDU session to be created in the H-SMF or SMF" ,required=true )  @Valid @RequestBody PduSessionCreateData pduSessionCreateData) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"alwaysOnGranted\" : false, \"ueIpv6InterfaceId\" : \"ueIpv6InterfaceId\", \"dnAaaAddress\" : { \"ipv6Addr\" : \"2001:db8:85a3::8a2e:370:7334\", \"ipv4Addr\" : \"198.51.100.1\", \"ipv6Prefix\" : \"2001:db8:abcd:12::0/64\" }, \"supportedFeatures\" : \"supportedFeatures\", \"redundantPduSessionInfo\" : { \"pduSessionPairId\" : 151 }, \"hcnTunnelInfo\" : { \"ipv6Addr\" : \"2001:db8:85a3::8a2e:370:7334\", \"gtpTeid\" : \"gtpTeid\", \"ipv4Addr\" : \"198.51.100.1\" }, \"sscMode\" : \"sscMode\", \"epsBearerInfo\" : [ { \"pgwS8uFteid\" : \"pgwS8uFteid\", \"ebi\" : 9, \"bearerLevelQoS\" : \"bearerLevelQoS\" }, { \"pgwS8uFteid\" : \"pgwS8uFteid\", \"ebi\" : 9, \"bearerLevelQoS\" : \"bearerLevelQoS\" } ], \"smfInstanceId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"maAcceptedInd\" : false, \"gpsi\" : \"gpsi\", \"sessionAmbr\" : { \"uplink\" : \"uplink\", \"downlink\" : \"downlink\" }, \"n1SmInfoToUe\" : { \"contentId\" : \"contentId\" }, \"upSecurity\" : { }, \"smfServiceInstanceId\" : \"smfServiceInstanceId\", \"hSmfInstanceId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"hSmfServiceInstanceId\" : \"hSmfServiceInstanceId\", \"nspuSupportInd\" : true, \"pduSessionId\" : 20, \"nefExtBufSupportInd\" : false, \"enablePauseCharging\" : false, \"epsPdnCnxInfo\" : { \"linkedBearerId\" : 13, \"pgwS8cFteid\" : \"pgwS8cFteid\", \"pgwNodeName\" : \"pgwNodeName\" }, \"dnaiList\" : [ null, null ], \"ueIpv6Prefix\" : \"2001:db8:abcd:12::0/64\", \"additionalCnTunnelInfo\" : { \"ipv6Addr\" : \"2001:db8:85a3::8a2e:370:7334\", \"gtpTeid\" : \"gtpTeid\", \"ipv4Addr\" : \"198.51.100.1\" }, \"roamingChargingProfile\" : { \"triggers\" : [ { \"timeLimit\" : 3, \"volumeLimit64\" : 2147483647, \"maxNumberOfccc\" : 2147483647, \"volumeLimit\" : 2147483647, \"eventLimit\" : 1238738200 }, { \"timeLimit\" : 3, \"volumeLimit64\" : 2147483647, \"maxNumberOfccc\" : 2147483647, \"volumeLimit\" : 2147483647, \"eventLimit\" : 1238738200 } ] }, \"qosFlowsSetupList\" : [ { \"qosFlowProfile\" : { \"dynamic5Qi\" : { \"extMaxDataBurstVol\" : 1370662, \"priorityLevel\" : 94, \"extPacketDelBudget\" : 1, \"maxDataBurstVol\" : 610, \"packetErrRate\" : \"packetErrRate\", \"cnPacketDelayBudgetDl\" : 1, \"cnPacketDelayBudgetUl\" : 1, \"averWindow\" : 420, \"packetDelayBudget\" : 1 }, \"gbrQosFlowInfo\" : { \"maxFbrDl\" : \"maxFbrDl\", \"maxFbrUl\" : \"maxFbrUl\", \"maxPacketLossRateUl\" : 996, \"maxPacketLossRateDl\" : 502, \"guaFbrUl\" : \"guaFbrUl\", \"guaFbrDl\" : \"guaFbrDl\", \"alternativeQosProfileList\" : [ { \"index\" : 7, \"guaFbrUl\" : \"guaFbrUl\", \"guaFbrDl\" : \"guaFbrDl\", \"packetErrRate\" : \"packetErrRate\", \"packetDelayBudget\" : 1 }, { \"index\" : 7, \"guaFbrUl\" : \"guaFbrUl\", \"guaFbrDl\" : \"guaFbrDl\", \"packetErrRate\" : \"packetErrRate\", \"packetDelayBudget\" : 1 } ] }, \"qosRepPeriod\" : 8, \"5qi\" : 143, \"nonDynamic5Qi\" : { \"extMaxDataBurstVol\" : 725830, \"priorityLevel\" : 30, \"maxDataBurstVol\" : 3809, \"cnPacketDelayBudgetDl\" : 1, \"cnPacketDelayBudgetUl\" : 1, \"averWindow\" : 2891 }, \"arp\" : { \"priorityLevel\" : 9 } }, \"qosRules\" : \"qosRules\", \"qfi\" : 9, \"defaultQosRuleInd\" : true, \"qosFlowDescription\" : \"qosFlowDescription\", \"ebi\" : 8 }, { \"qosFlowProfile\" : { \"dynamic5Qi\" : { \"extMaxDataBurstVol\" : 1370662, \"priorityLevel\" : 94, \"extPacketDelBudget\" : 1, \"maxDataBurstVol\" : 610, \"packetErrRate\" : \"packetErrRate\", \"cnPacketDelayBudgetDl\" : 1, \"cnPacketDelayBudgetUl\" : 1, \"averWindow\" : 420, \"packetDelayBudget\" : 1 }, \"gbrQosFlowInfo\" : { \"maxFbrDl\" : \"maxFbrDl\", \"maxFbrUl\" : \"maxFbrUl\", \"maxPacketLossRateUl\" : 996, \"maxPacketLossRateDl\" : 502, \"guaFbrUl\" : \"guaFbrUl\", \"guaFbrDl\" : \"guaFbrDl\", \"alternativeQosProfileList\" : [ { \"index\" : 7, \"guaFbrUl\" : \"guaFbrUl\", \"guaFbrDl\" : \"guaFbrDl\", \"packetErrRate\" : \"packetErrRate\", \"packetDelayBudget\" : 1 }, { \"index\" : 7, \"guaFbrUl\" : \"guaFbrUl\", \"guaFbrDl\" : \"guaFbrDl\", \"packetErrRate\" : \"packetErrRate\", \"packetDelayBudget\" : 1 } ] }, \"qosRepPeriod\" : 8, \"5qi\" : 143, \"nonDynamic5Qi\" : { \"extMaxDataBurstVol\" : 725830, \"priorityLevel\" : 30, \"maxDataBurstVol\" : 3809, \"cnPacketDelayBudgetDl\" : 1, \"cnPacketDelayBudgetUl\" : 1, \"averWindow\" : 2891 }, \"arp\" : { \"priorityLevel\" : 9 } }, \"qosRules\" : \"qosRules\", \"qfi\" : 9, \"defaultQosRuleInd\" : true, \"qosFlowDescription\" : \"qosFlowDescription\", \"ebi\" : 8 } ], \"cnTunnelInfo\" : { \"ipv6Addr\" : \"2001:db8:85a3::8a2e:370:7334\", \"gtpTeid\" : \"gtpTeid\", \"ipv4Addr\" : \"198.51.100.1\" }, \"ueIpv4Address\" : \"198.51.100.1\", \"ipv6MultiHomingInd\" : false, \"ipv6Index\" : 6, \"smallDataRateControlEnabled\" : false, \"sNssai\" : { \"sd\" : \"sd\", \"sst\" : 153 }, \"homeProvidedChargingId\" : \"homeProvidedChargingId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /pdu-sessions/{pduSessionRef}/release : Release
     *
     * @param pduSessionRef PDU session reference (required)
     * @param releaseData data sent to H-SMF or SMF when releasing the PDU session (optional)
     * @return successful release of a PDU session with content in the response (status code 200)
     *         or successful release of a PDU session (status code 204)
     *         or Temporary Redirect (status code 307)
     *         or Permanent Redirect (status code 308)
     *         or Bad request (status code 400)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Length Required (status code 411)
     *         or Payload Too Large (status code 413)
     *         or Unsupported Media Type (status code 415)
     *         or Too Many Requests (status code 429)
     *         or Internal Server Error (status code 500)
     *         or Service Unavailable (status code 503)
     *         or Generic Error (status code 200)
     */
    @ApiOperation(value = "Release", nickname = "releasePduSession", notes = "", response = ReleasedData.class, authorizations = {
        @Authorization(value = "oAuth2ClientCredentials", scopes = {
            @AuthorizationScope(scope = "nsmf-pdusession", description = "Access to the nsmf-pdusession API") })
         }, tags={ "Individual PDU session (H-SMF or SMF)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful release of a PDU session with content in the response", response = ReleasedData.class),
        @ApiResponse(code = 204, message = "successful release of a PDU session"),
        @ApiResponse(code = 307, message = "Temporary Redirect", response = RedirectResponse.class),
        @ApiResponse(code = 308, message = "Permanent Redirect", response = RedirectResponse.class),
        @ApiResponse(code = 400, message = "Bad request", response = ProblemDetails.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class),
        @ApiResponse(code = 411, message = "Length Required", response = ProblemDetails.class),
        @ApiResponse(code = 413, message = "Payload Too Large", response = ProblemDetails.class),
        @ApiResponse(code = 415, message = "Unsupported Media Type", response = ProblemDetails.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = ProblemDetails.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ProblemDetails.class),
        @ApiResponse(code = 503, message = "Service Unavailable", response = ProblemDetails.class),
        @ApiResponse(code = 200, message = "Generic Error") })
    @PostMapping(
        value = "/pdu-sessions/{pduSessionRef}/release",
        produces = { "application/json", "multipart/related", "application/problem+json" },
        consumes = { "application/json", "multipart/related" }
    )
    default ResponseEntity<ReleasedData> releasePduSession(@ApiParam(value = "PDU session reference",required=true) @PathVariable("pduSessionRef") String pduSessionRef,@ApiParam(value = "data sent to H-SMF or SMF when releasing the PDU session"  )  @Valid @RequestBody(required = false) ReleaseData releaseData) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"n4Info\" : { \"psaUpfId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"n4DnaiInfo\" : { \"noDnaiChangeInd\" : true, \"noLocalPsaChangeInd\" : true, \"dnai\" : \"dnai\" }, \"n4MessagePayload\" : { \"contentId\" : \"contentId\" } }, \"n4InfoExt1\" : { \"psaUpfId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"n4DnaiInfo\" : { \"noDnaiChangeInd\" : true, \"noLocalPsaChangeInd\" : true, \"dnai\" : \"dnai\" }, \"n4MessagePayload\" : { \"contentId\" : \"contentId\" } }, \"n4InfoExt2\" : { \"psaUpfId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"n4DnaiInfo\" : { \"noDnaiChangeInd\" : true, \"noLocalPsaChangeInd\" : true, \"dnai\" : \"dnai\" }, \"n4MessagePayload\" : { \"contentId\" : \"contentId\" } }, \"apnRateStatus\" : { \"remainPacketsDl\" : 0, \"remainPacketsUl\" : 0, \"remainExReportsDl\" : 0, \"remainExReportsUl\" : 0 }, \"smallDataRateStatus\" : { \"remainPacketsDl\" : 0, \"remainPacketsUl\" : 0, \"remainExReportsDl\" : 0, \"remainExReportsUl\" : 0 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /pdu-sessions/{pduSessionRef}/retrieve : Retrieve
     *
     * @param pduSessionRef PDU session reference (required)
     * @param retrieveData representation of the payload of the Retrieve Request (required)
     * @return successful information retrieval (status code 200)
     *         or Temporary Redirect (status code 307)
     *         or Permanent Redirect (status code 308)
     *         or Bad request (status code 400)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Length Required (status code 411)
     *         or Payload Too Large (status code 413)
     *         or Unsupported Media Type (status code 415)
     *         or Too Many Requests (status code 429)
     *         or Internal Server Error (status code 500)
     *         or Service Unavailable (status code 503)
     *         or Gateway Timeout (status code 504)
     *         or Generic Error (status code 200)
     */
    @ApiOperation(value = "Retrieve", nickname = "retrievePduSession", notes = "", response = RetrievedData.class, authorizations = {
        @Authorization(value = "oAuth2ClientCredentials", scopes = {
            @AuthorizationScope(scope = "nsmf-pdusession", description = "Access to the nsmf-pdusession API") })
         }, tags={ "Individual PDU session (H-SMF or SMF)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful information retrieval", response = RetrievedData.class),
        @ApiResponse(code = 307, message = "Temporary Redirect", response = RedirectResponse.class),
        @ApiResponse(code = 308, message = "Permanent Redirect", response = RedirectResponse.class),
        @ApiResponse(code = 400, message = "Bad request", response = ProblemDetails.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class),
        @ApiResponse(code = 411, message = "Length Required", response = ProblemDetails.class),
        @ApiResponse(code = 413, message = "Payload Too Large", response = ProblemDetails.class),
        @ApiResponse(code = 415, message = "Unsupported Media Type", response = ProblemDetails.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = ProblemDetails.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ProblemDetails.class),
        @ApiResponse(code = 503, message = "Service Unavailable", response = ProblemDetails.class),
        @ApiResponse(code = 504, message = "Gateway Timeout", response = ProblemDetails.class),
        @ApiResponse(code = 200, message = "Generic Error") })
    @PostMapping(
        value = "/pdu-sessions/{pduSessionRef}/retrieve",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<RetrievedData> retrievePduSession(@ApiParam(value = "PDU session reference",required=true) @PathVariable("pduSessionRef") String pduSessionRef,@ApiParam(value = "representation of the payload of the Retrieve Request" ,required=true )  @Valid @RequestBody RetrieveData retrieveData) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"afCoordinationInfo\" : { \"notificationInfoList\" : [ { \"notifId\" : \"notifId\", \"notifUri\" : \"notifUri\", \"upBufferInd\" : false }, { \"notifId\" : \"notifId\", \"notifUri\" : \"notifUri\", \"upBufferInd\" : false } ], \"sourceDnai\" : \"sourceDnai\", \"sourceUeIpv4Addr\" : \"198.51.100.1\", \"sourceUeIpv6Prefix\" : \"2001:db8:abcd:12::0/64\" }, \"smallDataRateStatus\" : { \"remainPacketsDl\" : 0, \"remainPacketsUl\" : 0, \"remainExReportsDl\" : 0, \"remainExReportsUl\" : 0 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /pdu-sessions/{pduSessionRef}/transfer-mo-data : Transfer MO Data
     *
     * @param pduSessionRef PDU session reference (required)
     * @param jsonData  (optional)
     * @param binaryMoData  (optional)
     * @return successful transfering of MO data (status code 204)
     *         or Temporary Redirect (status code 307)
     *         or Permanent Redirect (status code 308)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Length Required (status code 411)
     *         or Payload Too Large (status code 413)
     *         or Unsupported Media Type (status code 415)
     *         or Too Many Requests (status code 429)
     *         or Internal Server Error (status code 500)
     *         or Service Unavailable (status code 503)
     *         or Generic Error (status code 200)
     */
    @ApiOperation(value = "Transfer MO Data", nickname = "transferMoData", notes = "", authorizations = {
        @Authorization(value = "oAuth2ClientCredentials", scopes = {
            @AuthorizationScope(scope = "nsmf-pdusession", description = "Access to the nsmf-pdusession API") })
         }, tags={ "Individual PDU session (H-SMF or SMF)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "successful transfering of MO data"),
        @ApiResponse(code = 307, message = "Temporary Redirect", response = RedirectResponse.class),
        @ApiResponse(code = 308, message = "Permanent Redirect", response = RedirectResponse.class),
        @ApiResponse(code = 400, message = "Bad request", response = ProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class),
        @ApiResponse(code = 411, message = "Length Required", response = ProblemDetails.class),
        @ApiResponse(code = 413, message = "Payload Too Large", response = ProblemDetails.class),
        @ApiResponse(code = 415, message = "Unsupported Media Type", response = ProblemDetails.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = ProblemDetails.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ProblemDetails.class),
        @ApiResponse(code = 503, message = "Service Unavailable", response = ProblemDetails.class),
        @ApiResponse(code = 200, message = "Generic Error") })
    @PostMapping(
        value = "/pdu-sessions/{pduSessionRef}/transfer-mo-data",
        produces = { "application/json", "application/problem+json" },
        consumes = { "multipart/related" }
    )
    default ResponseEntity<Void> transferMoData(@ApiParam(value = "PDU session reference",required=true) @PathVariable("pduSessionRef") String pduSessionRef,@ApiParam(value = "") @Valid @RequestPart(value = "jsonData", required = false)  TransferMoDataReqData jsonData,@ApiParam(value = "") @Valid @RequestPart(value = "binaryMoData", required = false) MultipartFile binaryMoData) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /pdu-sessions/{pduSessionRef}/modify : Update (initiated by V-SMF or I-SMF)
     *
     * @param pduSessionRef PDU session reference (required)
     * @param hsmfUpdateData representation of the updates to apply to the PDU session (required)
     * @return successful update of a PDU session with content in the response (status code 200)
     *         or successful update of a PDU session without content in the response (status code 204)
     *         or Temporary Redirect (status code 307)
     *         or Permanent Redirect (status code 308)
     *         or unsuccessful update of a PDU session (status code 400)
     *         or unsuccessful update of a PDU session (status code 403)
     *         or unsuccessful update of a PDU session (status code 404)
     *         or Length Required (status code 411)
     *         or Payload Too Large (status code 413)
     *         or Unsupported Media Type (status code 415)
     *         or Too Many Requests (status code 429)
     *         or unsuccessful update of a PDU session (status code 500)
     *         or unsuccessful update of a PDU session (status code 503)
     *         or Generic Error (status code 200)
     */
    @ApiOperation(value = "Update (initiated by V-SMF or I-SMF)", nickname = "updatePduSession", notes = "", response = HsmfUpdatedData.class, authorizations = {
        @Authorization(value = "oAuth2ClientCredentials", scopes = {
            @AuthorizationScope(scope = "nsmf-pdusession", description = "Access to the nsmf-pdusession API") })
         }, tags={ "Individual PDU session (H-SMF or SMF)", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful update of a PDU session with content in the response", response = HsmfUpdatedData.class),
        @ApiResponse(code = 204, message = "successful update of a PDU session without content in the response"),
        @ApiResponse(code = 307, message = "Temporary Redirect", response = RedirectResponse.class),
        @ApiResponse(code = 308, message = "Permanent Redirect", response = RedirectResponse.class),
        @ApiResponse(code = 400, message = "unsuccessful update of a PDU session", response = HsmfUpdateError.class),
        @ApiResponse(code = 403, message = "unsuccessful update of a PDU session", response = HsmfUpdateError.class),
        @ApiResponse(code = 404, message = "unsuccessful update of a PDU session", response = HsmfUpdateError.class),
        @ApiResponse(code = 411, message = "Length Required", response = ProblemDetails.class),
        @ApiResponse(code = 413, message = "Payload Too Large", response = ProblemDetails.class),
        @ApiResponse(code = 415, message = "Unsupported Media Type", response = ProblemDetails.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = ProblemDetails.class),
        @ApiResponse(code = 500, message = "unsuccessful update of a PDU session", response = HsmfUpdateError.class),
        @ApiResponse(code = 503, message = "unsuccessful update of a PDU session", response = HsmfUpdateError.class),
        @ApiResponse(code = 200, message = "Generic Error") })
    @PostMapping(
        value = "/pdu-sessions/{pduSessionRef}/modify",
        produces = { "application/json", "multipart/related", "application/problem+json" },
        consumes = { "application/json", "multipart/related" }
    )
    default ResponseEntity<HsmfUpdatedData> updatePduSession(@ApiParam(value = "PDU session reference",required=true) @PathVariable("pduSessionRef") String pduSessionRef,@ApiParam(value = "representation of the updates to apply to the PDU session" ,required=true )  @Valid @RequestBody HsmfUpdateData hsmfUpdateData) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"n4Info\" : { \"psaUpfId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"n4DnaiInfo\" : { \"noDnaiChangeInd\" : true, \"noLocalPsaChangeInd\" : true, \"dnai\" : \"dnai\" }, \"n4MessagePayload\" : { \"contentId\" : \"contentId\" } }, \"n4InfoExt1\" : { \"psaUpfId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"n4DnaiInfo\" : { \"noDnaiChangeInd\" : true, \"noLocalPsaChangeInd\" : true, \"dnai\" : \"dnai\" }, \"n4MessagePayload\" : { \"contentId\" : \"contentId\" } }, \"n4InfoExt2\" : { \"psaUpfId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"n4DnaiInfo\" : { \"noDnaiChangeInd\" : true, \"noLocalPsaChangeInd\" : true, \"dnai\" : \"dnai\" }, \"n4MessagePayload\" : { \"contentId\" : \"contentId\" } }, \"supportedFeatures\" : \"supportedFeatures\", \"epsPdnCnxInfo\" : { \"linkedBearerId\" : 13, \"pgwS8cFteid\" : \"pgwS8cFteid\", \"pgwNodeName\" : \"pgwNodeName\" }, \"dnaiList\" : [ null, null ], \"pti\" : 20, \"epsBearerInfo\" : [ { \"pgwS8uFteid\" : \"pgwS8uFteid\", \"ebi\" : 9, \"bearerLevelQoS\" : \"bearerLevelQoS\" }, { \"pgwS8uFteid\" : \"pgwS8uFteid\", \"ebi\" : 9, \"bearerLevelQoS\" : \"bearerLevelQoS\" } ], \"roamingChargingProfile\" : { \"triggers\" : [ { \"timeLimit\" : 3, \"volumeLimit64\" : 2147483647, \"maxNumberOfccc\" : 2147483647, \"volumeLimit\" : 2147483647, \"eventLimit\" : 1238738200 }, { \"timeLimit\" : 3, \"volumeLimit64\" : 2147483647, \"maxNumberOfccc\" : 2147483647, \"volumeLimit\" : 2147483647, \"eventLimit\" : 1238738200 } ] }, \"qosFlowsSetupList\" : [ { \"qosFlowProfile\" : { \"dynamic5Qi\" : { \"extMaxDataBurstVol\" : 1370662, \"priorityLevel\" : 94, \"extPacketDelBudget\" : 1, \"maxDataBurstVol\" : 610, \"packetErrRate\" : \"packetErrRate\", \"cnPacketDelayBudgetDl\" : 1, \"cnPacketDelayBudgetUl\" : 1, \"averWindow\" : 420, \"packetDelayBudget\" : 1 }, \"gbrQosFlowInfo\" : { \"maxFbrDl\" : \"maxFbrDl\", \"maxFbrUl\" : \"maxFbrUl\", \"maxPacketLossRateUl\" : 996, \"maxPacketLossRateDl\" : 502, \"guaFbrUl\" : \"guaFbrUl\", \"guaFbrDl\" : \"guaFbrDl\", \"alternativeQosProfileList\" : [ { \"index\" : 7, \"guaFbrUl\" : \"guaFbrUl\", \"guaFbrDl\" : \"guaFbrDl\", \"packetErrRate\" : \"packetErrRate\", \"packetDelayBudget\" : 1 }, { \"index\" : 7, \"guaFbrUl\" : \"guaFbrUl\", \"guaFbrDl\" : \"guaFbrDl\", \"packetErrRate\" : \"packetErrRate\", \"packetDelayBudget\" : 1 } ] }, \"qosRepPeriod\" : 8, \"5qi\" : 143, \"nonDynamic5Qi\" : { \"extMaxDataBurstVol\" : 725830, \"priorityLevel\" : 30, \"maxDataBurstVol\" : 3809, \"cnPacketDelayBudgetDl\" : 1, \"cnPacketDelayBudgetUl\" : 1, \"averWindow\" : 2891 }, \"arp\" : { \"priorityLevel\" : 9 } }, \"qosRules\" : \"qosRules\", \"qfi\" : 9, \"defaultQosRuleInd\" : true, \"qosFlowDescription\" : \"qosFlowDescription\", \"ebi\" : 8 }, { \"qosFlowProfile\" : { \"dynamic5Qi\" : { \"extMaxDataBurstVol\" : 1370662, \"priorityLevel\" : 94, \"extPacketDelBudget\" : 1, \"maxDataBurstVol\" : 610, \"packetErrRate\" : \"packetErrRate\", \"cnPacketDelayBudgetDl\" : 1, \"cnPacketDelayBudgetUl\" : 1, \"averWindow\" : 420, \"packetDelayBudget\" : 1 }, \"gbrQosFlowInfo\" : { \"maxFbrDl\" : \"maxFbrDl\", \"maxFbrUl\" : \"maxFbrUl\", \"maxPacketLossRateUl\" : 996, \"maxPacketLossRateDl\" : 502, \"guaFbrUl\" : \"guaFbrUl\", \"guaFbrDl\" : \"guaFbrDl\", \"alternativeQosProfileList\" : [ { \"index\" : 7, \"guaFbrUl\" : \"guaFbrUl\", \"guaFbrDl\" : \"guaFbrDl\", \"packetErrRate\" : \"packetErrRate\", \"packetDelayBudget\" : 1 }, { \"index\" : 7, \"guaFbrUl\" : \"guaFbrUl\", \"guaFbrDl\" : \"guaFbrDl\", \"packetErrRate\" : \"packetErrRate\", \"packetDelayBudget\" : 1 } ] }, \"qosRepPeriod\" : 8, \"5qi\" : 143, \"nonDynamic5Qi\" : { \"extMaxDataBurstVol\" : 725830, \"priorityLevel\" : 30, \"maxDataBurstVol\" : 3809, \"cnPacketDelayBudgetDl\" : 1, \"cnPacketDelayBudgetUl\" : 1, \"averWindow\" : 2891 }, \"arp\" : { \"priorityLevel\" : 9 } }, \"qosRules\" : \"qosRules\", \"qfi\" : 9, \"defaultQosRuleInd\" : true, \"qosFlowDescription\" : \"qosFlowDescription\", \"ebi\" : 8 } ], \"sessionAmbr\" : { \"uplink\" : \"uplink\", \"downlink\" : \"downlink\" }, \"n1SmInfoToUe\" : { \"contentId\" : \"contentId\" }, \"upSecurity\" : { }, \"ipv6MultiHomingInd\" : false }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
