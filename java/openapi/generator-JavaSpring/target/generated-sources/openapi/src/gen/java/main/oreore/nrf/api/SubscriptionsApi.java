/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package oreore.nrf.api;

import java.util.List;
import oreore.nrf.model.PatchItem;
import oreore.nrf.model.ProblemDetails;
import oreore.nrf.model.RedirectResponse;
import oreore.nrf.model.SubscriptionData;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-12-19T15:04:29.833052+09:00[Asia/Tokyo]")
@Validated
@Api(value = "subscriptions", description = "the subscriptions API")
public interface SubscriptionsApi {

    /**
     * POST /subscriptions : Create a new subscription
     *
     * @param subscriptionData  (required)
     * @param contentEncoding Content-Encoding, described in IETF RFC 7231 (optional)
     * @param acceptEncoding Accept-Encoding, described in IETF RFC 7231 (optional)
     * @return Expected response to a valid request (status code 201)
     *         or Temporary Redirect (status code 307)
     *         or Permanent Redirect (status code 308)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Length Required (status code 411)
     *         or Payload Too Large (status code 413)
     *         or Unsupported Media Type (status code 415)
     *         or Too Many Requests (status code 429)
     *         or Internal Server Error (status code 500)
     *         or Not Implemented (status code 501)
     *         or Service Unavailable (status code 503)
     *         or Generic Error (status code 200)
     */

    @ApiOperation(value = "Create a new subscription", nickname = "createSubscription", notes = "", response = SubscriptionData.class, authorizations = {
        @Authorization(value = "oAuth2ClientCredentials", scopes = {
            @AuthorizationScope(scope = "nnrf-nfm", description = "Access to the Nnrf_NFManagement API") })
         }, tags={ "Subscriptions (Collection)", })
    @ApiResponses(value = { 

        @ApiResponse(code = 201, message = "Expected response to a valid request", response = SubscriptionData.class),

        @ApiResponse(code = 307, message = "Temporary Redirect", response = RedirectResponse.class),

        @ApiResponse(code = 308, message = "Permanent Redirect", response = RedirectResponse.class),

        @ApiResponse(code = 400, message = "Bad request", response = ProblemDetails.class),

        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),

        @ApiResponse(code = 403, message = "Forbidden", response = ProblemDetails.class),

        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class),

        @ApiResponse(code = 411, message = "Length Required", response = ProblemDetails.class),

        @ApiResponse(code = 413, message = "Payload Too Large", response = ProblemDetails.class),

        @ApiResponse(code = 415, message = "Unsupported Media Type", response = ProblemDetails.class),

        @ApiResponse(code = 429, message = "Too Many Requests", response = ProblemDetails.class),

        @ApiResponse(code = 500, message = "Internal Server Error", response = ProblemDetails.class),

        @ApiResponse(code = 501, message = "Not Implemented", response = ProblemDetails.class),

        @ApiResponse(code = 503, message = "Service Unavailable", response = ProblemDetails.class),

        @ApiResponse(code = 200, message = "Generic Error") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/subscriptions",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<SubscriptionData>> _createSubscription(

@ApiParam(value = "", required = true )   @Valid @RequestBody Mono<SubscriptionData> subscriptionData,
@ApiParam(value = "Content-Encoding, described in IETF RFC 7231") @RequestHeader(value = "Content-Encoding", required = false) String contentEncoding
,
@ApiParam(value = "Accept-Encoding, described in IETF RFC 7231") @RequestHeader(value = "Accept-Encoding", required = false) String acceptEncoding
, @springfox.documentation.annotations.ApiIgnore final ServerWebExchange exchange) {
        return createSubscription(subscriptionData, contentEncoding, acceptEncoding, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<SubscriptionData>> createSubscription(Mono<SubscriptionData> subscriptionData, String contentEncoding, String acceptEncoding, @springfox.documentation.annotations.ApiIgnore final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.valueOf(201));
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"reqNotifEvents\" : [ null, null ], \"hnrfUri\" : \"hnrfUri\", \"reqNfFqdn\" : \"reqNfFqdn\", \"reqNfInstanceId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"nid\" : \"nid\", \"notifCondition\" : { \"monitoredAttributes\" : [ \"monitoredAttributes\", \"monitoredAttributes\" ], \"unmonitoredAttributes\" : [ \"unmonitoredAttributes\", \"unmonitoredAttributes\" ] }, \"reqPlmnList\" : [ { \"mnc\" : \"mnc\", \"mcc\" : \"mcc\" }, { \"mnc\" : \"mnc\", \"mcc\" : \"mcc\" } ], \"reqSnssais\" : [ { \"sd\" : \"sd\", \"sst\" : 58 }, { \"sd\" : \"sd\", \"sst\" : 58 } ], \"reqPerPlmnSnssais\" : [ { \"nid\" : \"nid\", \"plmnId\" : { \"mnc\" : \"mnc\", \"mcc\" : \"mcc\" }, \"sNssaiList\" : [ null, null ] }, { \"nid\" : \"nid\", \"plmnId\" : { \"mnc\" : \"mnc\", \"mcc\" : \"mcc\" }, \"sNssaiList\" : [ null, null ] } ], \"reqSnpnList\" : [ { \"mnc\" : \"mnc\", \"nid\" : \"nid\", \"mcc\" : \"mcc\" }, { \"mnc\" : \"mnc\", \"nid\" : \"nid\", \"mcc\" : \"mcc\" } ], \"nfStatusNotificationUri\" : \"nfStatusNotificationUri\", \"plmnId\" : { \"mnc\" : \"mnc\", \"mcc\" : \"mcc\" }, \"servingScope\" : [ \"servingScope\", \"servingScope\" ], \"requesterFeatures\" : \"\", \"subscriptionId\" : \"subscriptionId\", \"subscrCond\" : \"\", \"nrfSupportedFeatures\" : \"\" }";
                result = ApiUtil.getExampleResponse(exchange, mediaType, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * DELETE /subscriptions/{subscriptionID} : Deletes a subscription
     *
     * @param subscriptionID Unique ID of the subscription to remove (required)
     * @return Expected response to a successful subscription removal (status code 204)
     *         or Temporary Redirect (status code 307)
     *         or Permanent Redirect (status code 308)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Length Required (status code 411)
     *         or Payload Too Large (status code 413)
     *         or Unsupported Media Type (status code 415)
     *         or Too Many Requests (status code 429)
     *         or Internal Server Error (status code 500)
     *         or Not Implemented (status code 501)
     *         or Service Unavailable (status code 503)
     *         or Generic Error (status code 200)
     */

    @ApiOperation(value = "Deletes a subscription", nickname = "removeSubscription", notes = "", authorizations = {
        @Authorization(value = "oAuth2ClientCredentials", scopes = {
            @AuthorizationScope(scope = "nnrf-nfm", description = "Access to the Nnrf_NFManagement API") })
         }, tags={ "Subscription ID (Document)", })
    @ApiResponses(value = { 

        @ApiResponse(code = 204, message = "Expected response to a successful subscription removal"),

        @ApiResponse(code = 307, message = "Temporary Redirect", response = RedirectResponse.class),

        @ApiResponse(code = 308, message = "Permanent Redirect", response = RedirectResponse.class),

        @ApiResponse(code = 400, message = "Bad request", response = ProblemDetails.class),

        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDetails.class),

        @ApiResponse(code = 403, message = "Forbidden", response = ProblemDetails.class),

        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class),

        @ApiResponse(code = 411, message = "Length Required", response = ProblemDetails.class),

        @ApiResponse(code = 413, message = "Payload Too Large", response = ProblemDetails.class),

        @ApiResponse(code = 415, message = "Unsupported Media Type", response = ProblemDetails.class),

        @ApiResponse(code = 429, message = "Too Many Requests", response = ProblemDetails.class),

        @ApiResponse(code = 500, message = "Internal Server Error", response = ProblemDetails.class),

        @ApiResponse(code = 501, message = "Not Implemented", response = ProblemDetails.class),

        @ApiResponse(code = 503, message = "Service Unavailable", response = ProblemDetails.class),

        @ApiResponse(code = 200, message = "Generic Error") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/subscriptions/{subscriptionID}",
        produces = { "application/json", "application/problem+json" }
    )
    default Mono<ResponseEntity<Void>> _removeSubscription(@Pattern(regexp = "^([0-9]{5,6}-)?[^-]+$") @ApiParam(value = "Unique ID of the subscription to remove", required = true) @PathVariable("subscriptionID") String subscriptionID

, @springfox.documentation.annotations.ApiIgnore final ServerWebExchange exchange) {
        return removeSubscription(subscriptionID, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<Void>> removeSubscription(String subscriptionID, @springfox.documentation.annotations.ApiIgnore final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.OK);
        return result.then(Mono.empty());

    }


    /**
     * PATCH /subscriptions/{subscriptionID} : Updates a subscription
     *
     * @param subscriptionID Unique ID of the subscription to update (required)
     * @param patchItem  (required)
     * @param contentEncoding Content-Encoding, described in IETF RFC 7231 (optional)
     * @param acceptEncoding Accept-Encoding, described in IETF RFC 7231 (optional)
     * @return Expected response to a valid request (status code 200)
     *         or No Content (status code 204)
     *         or Temporary Redirect (status code 307)
     *         or Permanent Redirect (status code 308)
     *         or Bad request (status code 400)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Length Required (status code 411)
     *         or Payload Too Large (status code 413)
     *         or Unsupported Media Type (status code 415)
     *         or Too Many Requests (status code 429)
     *         or Internal Server Error (status code 500)
     *         or Not Implemented (status code 501)
     *         or Service Unavailable (status code 503)
     *         or Generic Error (status code 200)
     */

    @ApiOperation(value = "Updates a subscription", nickname = "updateSubscription", notes = "", response = SubscriptionData.class, authorizations = {
        @Authorization(value = "oAuth2ClientCredentials", scopes = {
            @AuthorizationScope(scope = "nnrf-nfm", description = "Access to the Nnrf_NFManagement API") })
         }, tags={ "Subscription ID (Document)", })
    @ApiResponses(value = { 

        @ApiResponse(code = 200, message = "Expected response to a valid request", response = SubscriptionData.class),

        @ApiResponse(code = 204, message = "No Content"),

        @ApiResponse(code = 307, message = "Temporary Redirect", response = RedirectResponse.class),

        @ApiResponse(code = 308, message = "Permanent Redirect", response = RedirectResponse.class),

        @ApiResponse(code = 400, message = "Bad request", response = ProblemDetails.class),

        @ApiResponse(code = 403, message = "Forbidden", response = ProblemDetails.class),

        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class),

        @ApiResponse(code = 411, message = "Length Required", response = ProblemDetails.class),

        @ApiResponse(code = 413, message = "Payload Too Large", response = ProblemDetails.class),

        @ApiResponse(code = 415, message = "Unsupported Media Type", response = ProblemDetails.class),

        @ApiResponse(code = 429, message = "Too Many Requests", response = ProblemDetails.class),

        @ApiResponse(code = 500, message = "Internal Server Error", response = ProblemDetails.class),

        @ApiResponse(code = 501, message = "Not Implemented", response = ProblemDetails.class),

        @ApiResponse(code = 503, message = "Service Unavailable", response = ProblemDetails.class),

        @ApiResponse(code = 200, message = "Generic Error") })
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/subscriptions/{subscriptionID}",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json-patch+json" }
    )
    default Mono<ResponseEntity<SubscriptionData>> _updateSubscription(@Pattern(regexp = "^([0-9]{5,6}-)?[^-]+$") @ApiParam(value = "Unique ID of the subscription to update", required = true) @PathVariable("subscriptionID") String subscriptionID

,

@ApiParam(value = "", required = true )   @Valid @RequestBody Flux<PatchItem> patchItem,
@ApiParam(value = "Content-Encoding, described in IETF RFC 7231") @RequestHeader(value = "Content-Encoding", required = false) String contentEncoding
,
@ApiParam(value = "Accept-Encoding, described in IETF RFC 7231") @RequestHeader(value = "Accept-Encoding", required = false) String acceptEncoding
, @springfox.documentation.annotations.ApiIgnore final ServerWebExchange exchange) {
        return updateSubscription(subscriptionID, patchItem, contentEncoding, acceptEncoding, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<SubscriptionData>> updateSubscription(String subscriptionID, Flux<PatchItem> patchItem, String contentEncoding, String acceptEncoding, @springfox.documentation.annotations.ApiIgnore final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.valueOf(200));
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"reqNotifEvents\" : [ null, null ], \"hnrfUri\" : \"hnrfUri\", \"reqNfFqdn\" : \"reqNfFqdn\", \"reqNfInstanceId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"nid\" : \"nid\", \"notifCondition\" : { \"monitoredAttributes\" : [ \"monitoredAttributes\", \"monitoredAttributes\" ], \"unmonitoredAttributes\" : [ \"unmonitoredAttributes\", \"unmonitoredAttributes\" ] }, \"reqPlmnList\" : [ { \"mnc\" : \"mnc\", \"mcc\" : \"mcc\" }, { \"mnc\" : \"mnc\", \"mcc\" : \"mcc\" } ], \"reqSnssais\" : [ { \"sd\" : \"sd\", \"sst\" : 58 }, { \"sd\" : \"sd\", \"sst\" : 58 } ], \"reqPerPlmnSnssais\" : [ { \"nid\" : \"nid\", \"plmnId\" : { \"mnc\" : \"mnc\", \"mcc\" : \"mcc\" }, \"sNssaiList\" : [ null, null ] }, { \"nid\" : \"nid\", \"plmnId\" : { \"mnc\" : \"mnc\", \"mcc\" : \"mcc\" }, \"sNssaiList\" : [ null, null ] } ], \"reqSnpnList\" : [ { \"mnc\" : \"mnc\", \"nid\" : \"nid\", \"mcc\" : \"mcc\" }, { \"mnc\" : \"mnc\", \"nid\" : \"nid\", \"mcc\" : \"mcc\" } ], \"nfStatusNotificationUri\" : \"nfStatusNotificationUri\", \"plmnId\" : { \"mnc\" : \"mnc\", \"mcc\" : \"mcc\" }, \"servingScope\" : [ \"servingScope\", \"servingScope\" ], \"requesterFeatures\" : \"\", \"subscriptionId\" : \"subscriptionId\", \"subscrCond\" : \"\", \"nrfSupportedFeatures\" : \"\" }";
                result = ApiUtil.getExampleResponse(exchange, mediaType, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }

}
