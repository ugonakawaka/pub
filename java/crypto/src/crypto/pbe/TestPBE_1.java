package crypto.pbe;

import java.io.IOException;
import java.security.AlgorithmParameters;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.InvalidParameterSpecException;
import java.util.HexFormat;
import java.util.function.BiConsumer;
import java.util.function.Consumer;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.PBEParameterSpec;

public class TestPBE_1 {

	static class Consts {
		static final String TARGET_ALGORITM = "PBEWithHmacSHA256AndAES_256";
	}

	static record EncryptResult(byte[] encrypted, byte[] encodedAlgParams) {

	}

	static final HexFormat hexFormat = HexFormat.of().withUpperCase().withDelimiter("");
	static final BiConsumer<String, byte[]> printerHex = (header, bs) -> {
		System.out.printf("%s %s%n", header, hexFormat.formatHex(bs));
	};

	// Password-Based Cryptography
	// https://www.rfc-editor.org/rfc/rfc8018
	public static void main(String[] args) throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException,
			IllegalBlockSizeException, BadPaddingException, IOException, InvalidKeySpecException,
			InvalidAlgorithmParameterException, InvalidParameterSpecException {

		// https://docs.oracle.com/javase/jp/18/security/java-cryptography-architecture-jca-reference-guide.html

		final var text = "This is another example";
		final var password = "aBcd1234";
		EncryptResult encryptResult = encrypt(password, text);

		System.out.printf("size: %d%n", text.getBytes().length);
		System.out.printf("size: %d%n", encryptResult.encrypted.length);
		System.out.printf("%s%n", hexFormat.formatHex(encryptResult.encrypted));
		// byte[] bs = decrypt(password);

		var decryptedText = decrypt(password, encryptResult.encrypted, encryptResult.encodedAlgParams);
		System.out.println(new String(decryptedText));
	}

	static EncryptResult encrypt(String password, String text) throws InvalidKeyException, NoSuchAlgorithmException,
			NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException, IOException,
			InvalidKeySpecException, InvalidAlgorithmParameterException, InvalidParameterSpecException {

		var keySpec = new PBEKeySpec(password.toCharArray());

		var keyFactory = SecretKeyFactory.getInstance("PBEWithHmacSHA256AndAES_256");

		var myKey = keyFactory.generateSecret(keySpec);
		// get cipher object for password-based encryption
		Cipher c = Cipher.getInstance("PBEWithHmacSHA256AndAES_256");

		{
			// retrieve parameters generated by underlying cipher
			// implementation
			AlgorithmParameters algParams = c.getParameters();

			// get parameter encoding and store it away
			byte[] encodedAlgParams = algParams.getEncoded();
			System.out.println(encodedAlgParams);
			System.out.println(encodedAlgParams.length);
		}
		// initialize cipher for encryption, without supplying
		// any parameters. Here, "myKey" is assumed to refer
		// to an already-generated key.
		c.init(Cipher.ENCRYPT_MODE, myKey);

		// encrypt some data and store away ciphertext
		// for later decryption
		byte[] cipherText = c.doFinal(text.getBytes());

		// retrieve parameters generated by underlying cipher
		// implementation
		AlgorithmParameters algParams = c.getParameters();

		// get parameter encoding and store it away
		byte[] encodedAlgParams = algParams.getEncoded();

		{ // debug
			System.out.println("=============");
			System.out.println(algParams.getAlgorithm());
			System.out.println(algParams.getProvider());
			PBEParameterSpec spec = algParams.getParameterSpec(PBEParameterSpec.class);
			System.out.println(spec.getIterationCount());// 反復回数
			printerHex.accept("SALT:", spec.getSalt());
			printerHex.accept("encodedAlgParams(ASN.1):", encodedAlgParams);
			System.out.println("=============");

		}

		var encryptResult = new EncryptResult(cipherText, encodedAlgParams);
		return encryptResult;
	}

	static byte[] decrypt(String password, byte[] cipherText, byte[] encodedAlgParams)
			throws InvalidKeyException, NoSuchAlgorithmException, NoSuchPaddingException, IllegalBlockSizeException,
			BadPaddingException, IOException, InvalidKeySpecException, InvalidAlgorithmParameterException {

		var keySpec = new PBEKeySpec(password.toCharArray());

		var keyFactory = SecretKeyFactory.getInstance("PBEWithHmacSHA256AndAES_256");

		var myKey = keyFactory.generateSecret(keySpec);

		Cipher c = Cipher.getInstance("PBEWithHmacSHA256AndAES_256");

		// byte[] encodedAlgParams = c.getParameters().getEncoded();

		AlgorithmParameters algParams = AlgorithmParameters.getInstance("PBEWithHmacSHA256AndAES_256");

		algParams.init(encodedAlgParams);

		c.init(Cipher.DECRYPT_MODE, myKey, algParams);

		byte[] decryptedText = c.doFinal(cipherText);

		return decryptedText;
	}

}
