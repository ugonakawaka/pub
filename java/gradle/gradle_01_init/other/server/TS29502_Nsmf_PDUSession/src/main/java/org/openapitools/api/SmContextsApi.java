/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import aaaa.ExtProblemDetails;
import aaaa.ProblemDetails;
import aaaa.RedirectResponse;
import aaaa.SendMoDataReqData;
import aaaa.SmContextCreateData;
import aaaa.SmContextCreateError;
import aaaa.SmContextCreatedData;
import aaaa.SmContextReleaseData;
import aaaa.SmContextReleasedData;
import aaaa.SmContextRetrieveData;
import aaaa.SmContextRetrievedData;
import aaaa.SmContextUpdateData;
import aaaa.SmContextUpdateError;
import aaaa.SmContextUpdatedData;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-04-09T17:51:16.518942+09:00[Asia/Tokyo]")
@Validated
@Api(value = "sm-contexts", description = "the sm-contexts API")
public interface SmContextsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /sm-contexts : Create SM Context
     *
     * @param jsonData  (optional)
     * @param binaryDataN1SmMessage  (optional)
     * @param binaryDataN2SmInformation  (optional)
     * @param binaryDataN2SmInformationExt1  (optional)
     * @return successful creation of an SM context (status code 201)
     *         or Temporary Redirect (status code 307)
     *         or Permanent Redirect (status code 308)
     *         or unsuccessful creation of an SM context - bad request (status code 400)
     *         or unsuccessful creation of an SM context - forbidden (status code 403)
     *         or unsuccessful creation of an SM context - not found (status code 404)
     *         or Length Required (status code 411)
     *         or Payload Too Large (status code 413)
     *         or Unsupported Media Type (status code 415)
     *         or Too Many Requests (status code 429)
     *         or unsuccessful creation of an SM context - internal server error (status code 500)
     *         or unsuccessful creation of an SM context - service unavailable (status code 503)
     *         or unsuccessful creation of an SM context - gateway timeout (status code 504)
     *         or Generic Error (status code 200)
     */
    @ApiOperation(value = "Create SM Context", nickname = "postSmContexts", notes = "", response = SmContextCreatedData.class, authorizations = {
        @Authorization(value = "oAuth2ClientCredentials", scopes = {
            @AuthorizationScope(scope = "nsmf-pdusession", description = "Access to the nsmf-pdusession API") })
         }, tags={ "SM contexts collection", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "successful creation of an SM context", response = SmContextCreatedData.class),
        @ApiResponse(code = 307, message = "Temporary Redirect", response = RedirectResponse.class),
        @ApiResponse(code = 308, message = "Permanent Redirect", response = RedirectResponse.class),
        @ApiResponse(code = 400, message = "unsuccessful creation of an SM context - bad request", response = SmContextCreateError.class),
        @ApiResponse(code = 403, message = "unsuccessful creation of an SM context - forbidden", response = SmContextCreateError.class),
        @ApiResponse(code = 404, message = "unsuccessful creation of an SM context - not found", response = SmContextCreateError.class),
        @ApiResponse(code = 411, message = "Length Required", response = ProblemDetails.class),
        @ApiResponse(code = 413, message = "Payload Too Large", response = ExtProblemDetails.class),
        @ApiResponse(code = 415, message = "Unsupported Media Type", response = ExtProblemDetails.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = ExtProblemDetails.class),
        @ApiResponse(code = 500, message = "unsuccessful creation of an SM context - internal server error", response = SmContextCreateError.class),
        @ApiResponse(code = 503, message = "unsuccessful creation of an SM context - service unavailable", response = SmContextCreateError.class),
        @ApiResponse(code = 504, message = "unsuccessful creation of an SM context - gateway timeout", response = SmContextCreateError.class),
        @ApiResponse(code = 200, message = "Generic Error") })
    @PostMapping(
        value = "/sm-contexts",
        produces = { "application/json", "multipart/related", "application/problem+json" },
        consumes = { "multipart/related" }
    )
    default ResponseEntity<SmContextCreatedData> postSmContexts(@ApiParam(value = "") @Valid @RequestPart(value = "jsonData", required = false)  SmContextCreateData jsonData,@ApiParam(value = "") @Valid @RequestPart(value = "binaryDataN1SmMessage", required = false) MultipartFile binaryDataN1SmMessage,@ApiParam(value = "") @Valid @RequestPart(value = "binaryDataN2SmInformation", required = false) MultipartFile binaryDataN2SmInformation,@ApiParam(value = "") @Valid @RequestPart(value = "binaryDataN2SmInformationExt1", required = false) MultipartFile binaryDataN2SmInformationExt1) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"allocatedEbiList\" : [ { \"epsBearerId\" : 2, \"arp\" : { \"priorityLevel\" : 9 } }, { \"epsBearerId\" : 2, \"arp\" : { \"priorityLevel\" : 9 } } ], \"supportedFeatures\" : \"supportedFeatures\", \"selectedSmfId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"smfUri\" : \"smfUri\", \"gpsi\" : \"gpsi\", \"hSmfUri\" : \"hSmfUri\", \"n2SmInfo\" : { \"contentId\" : \"contentId\" }, \"selectedOldSmfId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"smfServiceInstanceId\" : \"smfServiceInstanceId\", \"pduSessionId\" : 20, \"sNssai\" : { \"sd\" : \"sd\", \"sst\" : 153 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /sm-contexts/{smContextRef}/release : Release SM Context
     *
     * @param smContextRef SM context reference (required)
     * @param smContextReleaseData representation of the data to be sent to the SMF when releasing the SM context (optional)
     * @return successful release of a PDU session with content in the response (status code 200)
     *         or successful release of an SM context without content in the response (status code 204)
     *         or Temporary Redirect (status code 307)
     *         or Permanent Redirect (status code 308)
     *         or Bad request (status code 400)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Length Required (status code 411)
     *         or Payload Too Large (status code 413)
     *         or Unsupported Media Type (status code 415)
     *         or Too Many Requests (status code 429)
     *         or Internal Server Error (status code 500)
     *         or Service Unavailable (status code 503)
     *         or Generic Error (status code 200)
     */
    @ApiOperation(value = "Release SM Context", nickname = "releaseSmContext", notes = "", response = SmContextReleasedData.class, authorizations = {
        @Authorization(value = "oAuth2ClientCredentials", scopes = {
            @AuthorizationScope(scope = "nsmf-pdusession", description = "Access to the nsmf-pdusession API") })
         }, tags={ "Individual SM context", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful release of a PDU session with content in the response", response = SmContextReleasedData.class),
        @ApiResponse(code = 204, message = "successful release of an SM context without content in the response"),
        @ApiResponse(code = 307, message = "Temporary Redirect", response = RedirectResponse.class),
        @ApiResponse(code = 308, message = "Permanent Redirect", response = RedirectResponse.class),
        @ApiResponse(code = 400, message = "Bad request", response = ProblemDetails.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class),
        @ApiResponse(code = 411, message = "Length Required", response = ProblemDetails.class),
        @ApiResponse(code = 413, message = "Payload Too Large", response = ProblemDetails.class),
        @ApiResponse(code = 415, message = "Unsupported Media Type", response = ProblemDetails.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = ProblemDetails.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ProblemDetails.class),
        @ApiResponse(code = 503, message = "Service Unavailable", response = ProblemDetails.class),
        @ApiResponse(code = 200, message = "Generic Error") })
    @PostMapping(
        value = "/sm-contexts/{smContextRef}/release",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json", "multipart/related" }
    )
    default ResponseEntity<SmContextReleasedData> releaseSmContext(@ApiParam(value = "SM context reference",required=true) @PathVariable("smContextRef") String smContextRef,@ApiParam(value = "representation of the data to be sent to the SMF when releasing the SM context"  )  @Valid @RequestBody(required = false) SmContextReleaseData smContextReleaseData) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"apnRateStatus\" : { \"remainPacketsDl\" : 0, \"remainPacketsUl\" : 0, \"remainExReportsDl\" : 0, \"remainExReportsUl\" : 0 }, \"smallDataRateStatus\" : { \"remainPacketsDl\" : 0, \"remainPacketsUl\" : 0, \"remainExReportsDl\" : 0, \"remainExReportsUl\" : 0 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /sm-contexts/{smContextRef}/retrieve : Retrieve SM Context
     *
     * @param smContextRef SM context reference (required)
     * @param smContextRetrieveData parameters used to retrieve the SM context (optional)
     * @return successful retrieval of an SM context (status code 200)
     *         or Temporary Redirect (status code 307)
     *         or Permanent Redirect (status code 308)
     *         or Bad request (status code 400)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Length Required (status code 411)
     *         or Payload Too Large (status code 413)
     *         or Unsupported Media Type (status code 415)
     *         or Too Many Requests (status code 429)
     *         or Internal Server Error (status code 500)
     *         or Service Unavailable (status code 503)
     *         or Gateway Timeout (status code 504)
     *         or Generic Error (status code 200)
     */
    @ApiOperation(value = "Retrieve SM Context", nickname = "retrieveSmContext", notes = "", response = SmContextRetrievedData.class, authorizations = {
        @Authorization(value = "oAuth2ClientCredentials", scopes = {
            @AuthorizationScope(scope = "nsmf-pdusession", description = "Access to the nsmf-pdusession API") })
         }, tags={ "Individual SM context", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful retrieval of an SM context", response = SmContextRetrievedData.class),
        @ApiResponse(code = 307, message = "Temporary Redirect", response = RedirectResponse.class),
        @ApiResponse(code = 308, message = "Permanent Redirect", response = RedirectResponse.class),
        @ApiResponse(code = 400, message = "Bad request", response = ProblemDetails.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDetails.class),
        @ApiResponse(code = 411, message = "Length Required", response = ProblemDetails.class),
        @ApiResponse(code = 413, message = "Payload Too Large", response = ProblemDetails.class),
        @ApiResponse(code = 415, message = "Unsupported Media Type", response = ProblemDetails.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = ProblemDetails.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ProblemDetails.class),
        @ApiResponse(code = 503, message = "Service Unavailable", response = ProblemDetails.class),
        @ApiResponse(code = 504, message = "Gateway Timeout", response = ProblemDetails.class),
        @ApiResponse(code = 200, message = "Generic Error") })
    @PostMapping(
        value = "/sm-contexts/{smContextRef}/retrieve",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SmContextRetrievedData> retrieveSmContext(@ApiParam(value = "SM context reference",required=true) @PathVariable("smContextRef") String smContextRef,@ApiParam(value = "parameters used to retrieve the SM context"  )  @Valid @RequestBody(required = false) SmContextRetrieveData smContextRetrieveData) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"ueEpsPdnConnection\" : \"ueEpsPdnConnection\", \"apnRateStatus\" : { \"remainPacketsDl\" : 0, \"remainPacketsUl\" : 0, \"remainExReportsDl\" : 0, \"remainExReportsUl\" : 0 }, \"afCoordinationInfo\" : { \"notificationInfoList\" : [ { \"notifId\" : \"notifId\", \"notifUri\" : \"notifUri\", \"upBufferInd\" : false }, { \"notifId\" : \"notifId\", \"notifUri\" : \"notifUri\", \"upBufferInd\" : false } ], \"sourceDnai\" : \"sourceDnai\", \"sourceUeIpv4Addr\" : \"198.51.100.1\", \"sourceUeIpv6Prefix\" : \"2001:db8:abcd:12::0/64\" }, \"smContext\" : { \"redundantPduSessionInfo\" : { \"pduSessionPairId\" : 151 }, \"qosFlowsList\" : [ { \"qosFlowProfile\" : { \"dynamic5Qi\" : { \"extMaxDataBurstVol\" : 1370662, \"priorityLevel\" : 94, \"extPacketDelBudget\" : 1, \"maxDataBurstVol\" : 610, \"packetErrRate\" : \"packetErrRate\", \"cnPacketDelayBudgetDl\" : 1, \"cnPacketDelayBudgetUl\" : 1, \"averWindow\" : 420, \"packetDelayBudget\" : 1 }, \"gbrQosFlowInfo\" : { \"maxFbrDl\" : \"maxFbrDl\", \"maxFbrUl\" : \"maxFbrUl\", \"maxPacketLossRateUl\" : 996, \"maxPacketLossRateDl\" : 502, \"guaFbrUl\" : \"guaFbrUl\", \"guaFbrDl\" : \"guaFbrDl\", \"alternativeQosProfileList\" : [ { \"index\" : 7, \"guaFbrUl\" : \"guaFbrUl\", \"guaFbrDl\" : \"guaFbrDl\", \"packetErrRate\" : \"packetErrRate\", \"packetDelayBudget\" : 1 }, { \"index\" : 7, \"guaFbrUl\" : \"guaFbrUl\", \"guaFbrDl\" : \"guaFbrDl\", \"packetErrRate\" : \"packetErrRate\", \"packetDelayBudget\" : 1 } ] }, \"qosRepPeriod\" : 8, \"5qi\" : 143, \"nonDynamic5Qi\" : { \"extMaxDataBurstVol\" : 725830, \"priorityLevel\" : 30, \"maxDataBurstVol\" : 3809, \"cnPacketDelayBudgetDl\" : 1, \"cnPacketDelayBudgetUl\" : 1, \"averWindow\" : 2891 }, \"arp\" : { \"priorityLevel\" : 9 } }, \"qosRules\" : \"qosRules\", \"qfi\" : 9, \"defaultQosRuleInd\" : true, \"qosFlowDescription\" : \"qosFlowDescription\", \"ebi\" : 8 }, { \"qosFlowProfile\" : { \"dynamic5Qi\" : { \"extMaxDataBurstVol\" : 1370662, \"priorityLevel\" : 94, \"extPacketDelBudget\" : 1, \"maxDataBurstVol\" : 610, \"packetErrRate\" : \"packetErrRate\", \"cnPacketDelayBudgetDl\" : 1, \"cnPacketDelayBudgetUl\" : 1, \"averWindow\" : 420, \"packetDelayBudget\" : 1 }, \"gbrQosFlowInfo\" : { \"maxFbrDl\" : \"maxFbrDl\", \"maxFbrUl\" : \"maxFbrUl\", \"maxPacketLossRateUl\" : 996, \"maxPacketLossRateDl\" : 502, \"guaFbrUl\" : \"guaFbrUl\", \"guaFbrDl\" : \"guaFbrDl\", \"alternativeQosProfileList\" : [ { \"index\" : 7, \"guaFbrUl\" : \"guaFbrUl\", \"guaFbrDl\" : \"guaFbrDl\", \"packetErrRate\" : \"packetErrRate\", \"packetDelayBudget\" : 1 }, { \"index\" : 7, \"guaFbrUl\" : \"guaFbrUl\", \"guaFbrDl\" : \"guaFbrDl\", \"packetErrRate\" : \"packetErrRate\", \"packetDelayBudget\" : 1 } ] }, \"qosRepPeriod\" : 8, \"5qi\" : 143, \"nonDynamic5Qi\" : { \"extMaxDataBurstVol\" : 725830, \"priorityLevel\" : 30, \"maxDataBurstVol\" : 3809, \"cnPacketDelayBudgetDl\" : 1, \"cnPacketDelayBudgetUl\" : 1, \"averWindow\" : 2891 }, \"arp\" : { \"priorityLevel\" : 9 } }, \"qosRules\" : \"qosRules\", \"qfi\" : 9, \"defaultQosRuleInd\" : true, \"qosFlowDescription\" : \"qosFlowDescription\", \"ebi\" : 8 } ], \"sessionAmbr\" : { \"uplink\" : \"uplink\", \"downlink\" : \"downlink\" }, \"upSecurity\" : { }, \"redRanTunnelInfo\" : { \"qfiList\" : [ null, null ], \"tunnelInfo\" : { \"ipv6Addr\" : \"2001:db8:85a3::8a2e:370:7334\", \"gtpTeid\" : \"gtpTeid\", \"ipv4Addr\" : \"198.51.100.1\" } }, \"pcfId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"smfServiceInstanceId\" : \"smfServiceInstanceId\", \"hSmfInstanceId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"nspuSupportInd\" : true, \"pduSessionId\" : 20, \"nefExtBufSupportInd\" : false, \"pcfGroupId\" : \"pcfGroupId\", \"enablePauseCharging\" : false, \"dnn\" : \"dnn\", \"chargingId\" : \"chargingId\", \"ueIpv6Prefix\" : \"2001:db8:abcd:12::0/64\", \"pduSessionSmfSetId\" : \"pduSessionSmfSetId\", \"selectedDnn\" : \"selectedDnn\", \"addRanTunnelInfo\" : [ { \"qfiList\" : [ null, null ], \"tunnelInfo\" : { \"ipv6Addr\" : \"2001:db8:85a3::8a2e:370:7334\", \"gtpTeid\" : \"gtpTeid\", \"ipv4Addr\" : \"198.51.100.1\" } }, { \"qfiList\" : [ null, null ], \"tunnelInfo\" : { \"ipv6Addr\" : \"2001:db8:85a3::8a2e:370:7334\", \"gtpTeid\" : \"gtpTeid\", \"ipv4Addr\" : \"198.51.100.1\" } } ], \"ipv6Index\" : 6, \"addRedRanTunnelInfo\" : [ { \"qfiList\" : [ null, null ], \"tunnelInfo\" : { \"ipv6Addr\" : \"2001:db8:85a3::8a2e:370:7334\", \"gtpTeid\" : \"gtpTeid\", \"ipv4Addr\" : \"198.51.100.1\" } }, { \"qfiList\" : [ null, null ], \"tunnelInfo\" : { \"ipv6Addr\" : \"2001:db8:85a3::8a2e:370:7334\", \"gtpTeid\" : \"gtpTeid\", \"ipv4Addr\" : \"198.51.100.1\" } } ], \"udmGroupId\" : \"udmGroupId\", \"alwaysOnGranted\" : false, \"dnAaaAddress\" : { \"ipv6Addr\" : \"2001:db8:85a3::8a2e:370:7334\", \"ipv4Addr\" : \"198.51.100.1\", \"ipv6Prefix\" : \"2001:db8:abcd:12::0/64\" }, \"epsBearerInfo\" : [ { \"pgwS8uFteid\" : \"pgwS8uFteid\", \"ebi\" : 9, \"bearerLevelQoS\" : \"bearerLevelQoS\" }, { \"pgwS8uFteid\" : \"pgwS8uFteid\", \"ebi\" : 9, \"bearerLevelQoS\" : \"bearerLevelQoS\" } ], \"smfInstanceId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"chargingInfo\" : { \"primaryChfSetId\" : \"primaryChfSetId\", \"secondaryChfInstanceId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"secondaryChfSetId\" : \"secondaryChfSetId\", \"secondaryChfAddress\" : \"secondaryChfAddress\", \"primaryChfAddress\" : \"primaryChfAddress\", \"primaryChfInstanceId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"gpsi\" : \"gpsi\", \"psaTunnelInfo\" : { \"ipv6Addr\" : \"2001:db8:85a3::8a2e:370:7334\", \"gtpTeid\" : \"gtpTeid\", \"ipv4Addr\" : \"198.51.100.1\" }, \"hSmfUri\" : \"hSmfUri\", \"hplmnSnssai\" : { \"sd\" : \"sd\", \"sst\" : 153 }, \"pcfSetId\" : \"pcfSetId\", \"hSmfServiceInstanceId\" : \"hSmfServiceInstanceId\", \"ranTunnelInfo\" : { \"qfiList\" : [ null, null ], \"tunnelInfo\" : { \"ipv6Addr\" : \"2001:db8:85a3::8a2e:370:7334\", \"gtpTeid\" : \"gtpTeid\", \"ipv4Addr\" : \"198.51.100.1\" } }, \"pduSessionRef\" : \"pduSessionRef\", \"pduSessionSmfServiceSetId\" : \"pduSessionSmfServiceSetId\", \"epsPdnCnxInfo\" : { \"linkedBearerId\" : 13, \"pgwS8cFteid\" : \"pgwS8cFteid\", \"pgwNodeName\" : \"pgwNodeName\" }, \"forwardingInd\" : false, \"routingIndicator\" : \"routingIndicator\", \"smfUri\" : \"smfUri\", \"roamingChargingProfile\" : { \"triggers\" : [ { \"timeLimit\" : 3, \"volumeLimit64\" : 2147483647, \"maxNumberOfccc\" : 2147483647, \"volumeLimit\" : 2147483647, \"eventLimit\" : 1238738200 }, { \"timeLimit\" : 3, \"volumeLimit64\" : 2147483647, \"maxNumberOfccc\" : 2147483647, \"volumeLimit\" : 2147483647, \"eventLimit\" : 1238738200 } ] }, \"smfBindingInfo\" : \"smfBindingInfo\", \"hNwPubKeyId\" : 6, \"ueIpv4Address\" : \"198.51.100.1\", \"sNssai\" : { \"sd\" : \"sd\", \"sst\" : 153 } }, \"dlDataWaitingInd\" : false, \"smallDataRateStatus\" : { \"remainPacketsDl\" : 0, \"remainPacketsUl\" : 0, \"remainExReportsDl\" : 0, \"remainExReportsUl\" : 0 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /sm-contexts/{smContextRef}/send-mo-data : Send MO Data
     *
     * @param smContextRef SM context reference (required)
     * @param jsonData  (optional)
     * @param binaryMoData  (optional)
     * @return successful sending of MO data (status code 204)
     *         or Temporary Redirect (status code 307)
     *         or Permanent Redirect (status code 308)
     *         or Bad request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Length Required (status code 411)
     *         or Payload Too Large (status code 413)
     *         or Unsupported Media Type (status code 415)
     *         or Too Many Requests (status code 429)
     *         or Internal Server Error (status code 500)
     *         or Service Unavailable (status code 503)
     *         or Generic Error (status code 200)
     */
    @ApiOperation(value = "Send MO Data", nickname = "sendMoData", notes = "", authorizations = {
        @Authorization(value = "oAuth2ClientCredentials", scopes = {
            @AuthorizationScope(scope = "nsmf-pdusession", description = "Access to the nsmf-pdusession API") })
         }, tags={ "Individual SM context", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "successful sending of MO data"),
        @ApiResponse(code = 307, message = "Temporary Redirect", response = RedirectResponse.class),
        @ApiResponse(code = 308, message = "Permanent Redirect", response = RedirectResponse.class),
        @ApiResponse(code = 400, message = "Bad request", response = ExtProblemDetails.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ExtProblemDetails.class),
        @ApiResponse(code = 403, message = "Forbidden", response = ExtProblemDetails.class),
        @ApiResponse(code = 404, message = "Not Found", response = ExtProblemDetails.class),
        @ApiResponse(code = 411, message = "Length Required", response = ProblemDetails.class),
        @ApiResponse(code = 413, message = "Payload Too Large", response = ExtProblemDetails.class),
        @ApiResponse(code = 415, message = "Unsupported Media Type", response = ExtProblemDetails.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = ExtProblemDetails.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ExtProblemDetails.class),
        @ApiResponse(code = 503, message = "Service Unavailable", response = ExtProblemDetails.class),
        @ApiResponse(code = 200, message = "Generic Error") })
    @PostMapping(
        value = "/sm-contexts/{smContextRef}/send-mo-data",
        produces = { "application/json", "application/problem+json" },
        consumes = { "multipart/related" }
    )
    default ResponseEntity<Void> sendMoData(@ApiParam(value = "SM context reference",required=true) @PathVariable("smContextRef") String smContextRef,@ApiParam(value = "") @Valid @RequestPart(value = "jsonData", required = false)  SendMoDataReqData jsonData,@ApiParam(value = "") @Valid @RequestPart(value = "binaryMoData", required = false) MultipartFile binaryMoData) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /sm-contexts/{smContextRef}/modify : Update SM Context
     *
     * @param smContextRef SM context reference (required)
     * @param smContextUpdateData representation of the updates to apply to the SM context (required)
     * @return successful update of an SM context with content in the response (status code 200)
     *         or successful update of an SM context without content in the response (status code 204)
     *         or Temporary Redirect (status code 307)
     *         or Permanent Redirect (status code 308)
     *         or unsuccessful update of an SM context - bad request (status code 400)
     *         or unsuccessful update of an SM context - forbidden (status code 403)
     *         or unsuccessful update of an SM context - not found (status code 404)
     *         or Length Required (status code 411)
     *         or Payload Too Large (status code 413)
     *         or Unsupported Media Type (status code 415)
     *         or Too Many Requests (status code 429)
     *         or unsuccessful update of an SM context - Internal server error (status code 500)
     *         or unsuccessful update of an SM context - Service Unavailable (status code 503)
     *         or Generic Error (status code 200)
     */
    @ApiOperation(value = "Update SM Context", nickname = "updateSmContext", notes = "", response = SmContextUpdatedData.class, authorizations = {
        @Authorization(value = "oAuth2ClientCredentials", scopes = {
            @AuthorizationScope(scope = "nsmf-pdusession", description = "Access to the nsmf-pdusession API") })
         }, tags={ "Individual SM context", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful update of an SM context with content in the response", response = SmContextUpdatedData.class),
        @ApiResponse(code = 204, message = "successful update of an SM context without content in the response"),
        @ApiResponse(code = 307, message = "Temporary Redirect", response = RedirectResponse.class),
        @ApiResponse(code = 308, message = "Permanent Redirect", response = RedirectResponse.class),
        @ApiResponse(code = 400, message = "unsuccessful update of an SM context - bad request", response = SmContextUpdateError.class),
        @ApiResponse(code = 403, message = "unsuccessful update of an SM context - forbidden", response = SmContextUpdateError.class),
        @ApiResponse(code = 404, message = "unsuccessful update of an SM context - not found", response = SmContextUpdateError.class),
        @ApiResponse(code = 411, message = "Length Required", response = ProblemDetails.class),
        @ApiResponse(code = 413, message = "Payload Too Large", response = ExtProblemDetails.class),
        @ApiResponse(code = 415, message = "Unsupported Media Type", response = ExtProblemDetails.class),
        @ApiResponse(code = 429, message = "Too Many Requests", response = ExtProblemDetails.class),
        @ApiResponse(code = 500, message = "unsuccessful update of an SM context - Internal server error", response = SmContextUpdateError.class),
        @ApiResponse(code = 503, message = "unsuccessful update of an SM context - Service Unavailable", response = SmContextUpdateError.class),
        @ApiResponse(code = 200, message = "Generic Error") })
    @PostMapping(
        value = "/sm-contexts/{smContextRef}/modify",
        produces = { "application/json", "multipart/related", "application/problem+json" },
        consumes = { "application/json", "multipart/related" }
    )
    default ResponseEntity<SmContextUpdatedData> updateSmContext(@ApiParam(value = "SM context reference",required=true) @PathVariable("smContextRef") String smContextRef,@ApiParam(value = "representation of the updates to apply to the SM context" ,required=true )  @Valid @RequestBody SmContextUpdateData smContextUpdateData) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"allocatedEbiList\" : [ { \"epsBearerId\" : 2, \"arp\" : { \"priorityLevel\" : 9 } }, { \"epsBearerId\" : 2, \"arp\" : { \"priorityLevel\" : 9 } } ], \"supportedFeatures\" : \"supportedFeatures\", \"selectedSmfId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"modifiedEbiList\" : [ { \"epsBearerId\" : 2, \"arp\" : { \"priorityLevel\" : 9 } }, { \"epsBearerId\" : 2, \"arp\" : { \"priorityLevel\" : 9 } } ], \"n1SmMsg\" : { \"contentId\" : \"contentId\" }, \"maAcceptedInd\" : false, \"dataForwarding\" : true, \"n2SmInfo\" : { \"contentId\" : \"contentId\" }, \"selectedOldSmfId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"n3DlForwardingTnlList\" : [ { \"ipv6Addr\" : \"2001:db8:85a3::8a2e:370:7334\", \"additionalTnlNb\" : 2, \"drbId\" : 3, \"gtpTeid\" : \"gtpTeid\", \"ipv4Addr\" : \"198.51.100.1\" }, { \"ipv6Addr\" : \"2001:db8:85a3::8a2e:370:7334\", \"additionalTnlNb\" : 2, \"drbId\" : 3, \"gtpTeid\" : \"gtpTeid\", \"ipv4Addr\" : \"198.51.100.1\" } ], \"n3UlForwardingTnlList\" : [ { \"ipv6Addr\" : \"2001:db8:85a3::8a2e:370:7334\", \"additionalTnlNb\" : 2, \"drbId\" : 3, \"gtpTeid\" : \"gtpTeid\", \"ipv4Addr\" : \"198.51.100.1\" }, { \"ipv6Addr\" : \"2001:db8:85a3::8a2e:370:7334\", \"additionalTnlNb\" : 2, \"drbId\" : 3, \"gtpTeid\" : \"gtpTeid\", \"ipv4Addr\" : \"198.51.100.1\" } ], \"epsBearerSetup\" : [ null, null ], \"forwardingBearerContexts\" : [ null, null ], \"forwardingFTeid\" : \"forwardingFTeid\", \"releaseEbiList\" : [ null, null ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
