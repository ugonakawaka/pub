目次
------
第１章	はじめの第一歩
第２章	型を信じろ！
第３章	関数の構文
第４章	Hello 再帰！
第５章	高階関数
第６章	モジュール
第７章	型やクラスを自分で作ろう
第８章	入出力
第９章	もっと入力、もっと出力
第１０章	関数型問題解決法
第１１章	ファンクターからアプリカティブファンクターへ
第１２章	モノイド
第１３章	モナドがいっぱい
第１４章	もうちょっとだけモナド
第１５章	Zipper


------
純粋関数型プログラミング言語
副作用
参照透明性
遅延評価
静的型付け
型推論

GHC(The Glasgow Hasckell Compiler)

関数を適用する
関数を呼び出す

中置関数
中置記法（ちゅうちきほう、infix notation）
前置記法 ポーランド記法（ポーランドきほう、Polish Notation）
逆ポーランド記法（ぎゃくポーランドきほう、英語: Reverse Polish Notation, RPN）

------
Prelude> succ 8
9
Prelude> succ 9 * 10
100
Prelude> 92 `div` 10
9
Prelude> div 92 10
9

名前を定義するときはletキーワードを使います

連結操作
++

*Main> let lostNumbers = [4,8,15,16,23,42]
*Main> lostNumbers 
[4,8,15,16,23,42]
*Main> [1] ++ [2] 
[1,2]

リストの先頭に何かを追加する

*Main> "heloo" ++ " " ++ "world"
"heloo world"
*Main> ['a'] ++ ['b']

:演算子(cons演算子)
*Main> 'A':" SMALL CAT"
"A SMALL CAT"

*Main> 5:[1,2,3,4]
[5,1,2,3,4]

!!演算子
リストの要素を先頭から位置で取得

*Main> "abcdefg" !! 6
'g'
*Main> "abcdefg" !! 1
'b'
*Main> "abcdefg" !! 0
'a'

*Main> let b = [[1],[2,3,4]]
*Main> b
[[1],[2,3,4]]
[[1],[2,3,4]]
*Main> b !! 1
[2,3,4]

<, <=, >=, > 演算子

*Main> 1 > 2
False
*Main> [1] > [2]
False
*Main> [1] > [1,2]
False
*Main> [1,3] > [1,2]
True

head関数 先頭の要素
*Main> head [9,7,6]
9

tail関数 先頭を除いた残りのリスト
*Main> tail [1,2,3]
[2,3]

last関数 最後の要素
*Main> last [1,2,9]
9

init関数 最後の要素を除いた残りのリスト
*Main> init [1,2,3,4]
[1,2,3]

空のリストは例外がおきる
*Main> head []
*** Exception: Prelude.head: empty list

length関数 リストを受け取りその長さを返す
*Main> length [1,5,9]
3

null関数 リストが空か
*Main> null []
True
*Main> null [1,2]
False

reverse関数 リストを逆順
*Main> reverse [9,4,8,5]
[5,8,4,9]

take関数 数とリストを取り、先頭から指定された数の要素を取り出す
*Main> take 4 [9,4,8,5]
[9,4,8,5]
*Main> take 2 [9,4,8,5]
[9,4]
*Main> take 0 [9,4,8,5]
[]
*Main> take 10 [9,4,8,5]
[9,4,8,5]

drop関数
*Main> drop 10 [9,4,8,5]
[]
*Main> drop 1 [9,4,8,5]
[4,8,5]
*Main> drop 3 [9,4,8,5]
[5]
*Main> drop 0 [9,4,8,5]
[9,4,8,5]

maximum関数
minimum関数
*Main> maximum [1,2,3,4]
4
*Main> minimum [1,2,3,4]
1

sum関数
*Main> sum [1]
1
*Main> sum [1,2]
3
*Main> sum [1,2,3]
6
*Main> sum []
0

product関数
*Main> product []
1
*Main> product [0]
0
*Main> product [0,1]
0
*Main> product [2,1,100]
200

elem関数 要素とリストを受け取り、それがリストの要素に含まれているかどうかを返す
*Main> elem 1 [1,3]
True
*Main> elem 4 [1,3]
False
*Main> 3 `elem` [0,3]
True

レンジrange
*Main> [1..10]
[1,2,3,4,5,6,7,8,9,10]
*Main> [3..7]
[3,4,5,6,7]
*Main> ['a'..'x']
"abcdefghijklmnopqrstuvwx"
*Main> ['K'..'x']
"KLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwx"
*Main> ['A'..'z']
"ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz"

レンジ ステップ ※減少
*Main> [2,4..20]
[2,4,6,8,10,12,14,16,18,20]
*Main> [21,20..3]
[21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3]

無限リスト
*Main> [1..]
*Main> take 11 [1..]
[1,2,3,4,5,6,7,8,9,10,11]

cycle
*Main> take 8 (cycle "ok")
"okokokok"

repeat
*Main> take 3 (repeat 7)
[7,7,7]

replicate関数 単一の値からなるリストをつくる
*Main> :t replicate 
replicate :: Int -> a -> [a]
*Main> replicate 3 10
[10,10,10]

*Main> [0.1, 0.3 .. 1]
[0.1,0.3,0.5,0.7,0.8999999999999999,1.0999999999999999]

§1.5 リスト内包表記
例）[1..10]の各要素をxに束縛しているという
述語(条件)
*Main> [x*2 | x <- [1..10]]
[2,4,6,8,10,12,14,16,18,20]
*Main> [x | x <- [1..10]]
[1,2,3,4,5,6,7,8,9,10]
*Main> [x*2 | x <- [1..10], x*2 >= 12]
[12,14,16,18,20]

*Main> [x | x <- [50..100], x `mod` 7 == 3]
[52,59,66,73,80,87,94]

述語を使ってリストを間引くことをフィルタという

*Main> boomBangs xs = [ if x < 10 then "BOOM!" else "BANG!" | x <- xs, odd x]
*Main> boomBangs [7..13]
["BOOM!","BOOM!","BANG!","BANG!"]

*Main> [x | x <- [10..20]]
[10,11,12,13,14,15,16,17,18,19,20]
*Main> [x | x <- [10..20], x /=13]
[10,11,12,14,15,16,17,18,19,20]
*Main> [x | x <- [10..20], x /=13, x/=15, x/=19]
[10,11,12,14,16,17,18,20]

*Main> [x + y]

<interactive>:170:2: error: Variable not in scope: x

<interactive>:170:6: error: Variable not in scope: y
*Main> [x + y| x<-[1,2,3]]

<interactive>:171:6: error: Variable not in scope: y
*Main> [x + y| x<-[1,2,3], y <-[]]
[]
*Main> [x + y| x<-[1,2,3], y <-[10]]
[11,12,13]
*Main> [x + y| x<-[1,2,3], y <-[10, 100, 1000]]
[11,101,1001,12,102,1002,13,103,1003]

組み合わせの積
*Main> [x*y | x <-[1,2,3], y <-[4,5,6]]
[4,5,6,8,10,12,12,15,18]

述語を追加してみる
*Main> [x*y | x <-[1,2,3], y <-[4,5,6], x*y > 7]
[8,10,12,12,15,18]
*Main> [x*y | x <-[1,2,3], y <-[4,5,6], x+y > 7]
[12,15,18]

*Main> let nouns = ["hobo", "frog", "pope"]
*Main> let adjectives = ["lazy", "grouchy", "scheming"]
*Main> [adjective ++ " " ++ noun | adjective <- adjectives, noun <- nouns  ]
["lazy hobo","lazy frog","lazy pope","grouchy hobo","grouchy frog","grouchy pope","scheming hobo","scheming frog","scheming pope"]

リストの長さを取得する _は読みすてるよという意味
*Main> length' xs = sum [1 | _ <- xs]
*Main> length' "ok"
2
*Main> length' "okok"
4

lengthの定義をみてみる
*Main> :t length
length :: Foldable t => t a -> Int
*Main> :t length'
length' :: Num a => [t] -> a

*Main> removeNonUppercase st = [c | c <-st,  c `elem` ['A'..'Z']]
*Main> removeNonUppercase "aaaaa"
""
*Main> removeNonUppercase "aaaaaAAAA"
"AAAA"

リストの入れ子
*Main> let xxs = [[1,2,3,4],[1,2,3,4],[1,2,3,4]]
*Main> [[x | x<- xs] | xs <- xxs]
[[1,2,3,4],[1,2,3,4],[1,2,3,4]]
*Main> [[x | x<- xs, even x] | xs <- xxs]
[[2,4],[2,4],[2,4]]

1.6 タプル
タプルは、違う型の組み合わせができる ヘテロということ
サイズが固定
このことはタプルに要素を追加する関数はできない
サイズが２のタプルをペア
サイズ３はトリプルという

*Main> (1, 3)
(1,3)
*Main> (1, 3, 'a')
(1,3,'a')
*Main> (1, 3, 'a', 1.3)
(1,3,'a',1.3)

*Main> [(1,2)]
[(1,2)]
*Main> [(1,2),(3,4)]
[(1,2),(3,4)]
*Main> [(1,2),(3,4),(5)]

<interactive>:217:1: error:
    • Non type-variable argument in the constraint: Num (a, b)
      (Use FlexibleContexts to permit this)
    • When checking the inferred type
        it :: forall a b. (Num a, Num b, Num (a, b)) => [(a, b)]

ペアを操作する関数
ひとつめの値を返す
*Main> fst ("z", 3)
"z"
ふたつめの値を返す
*Main> snd ("z", 3)
3

zip関数
*Main> zip [1,2,3][3,4,5]
[(1,3),(2,4),(3,5)]
*Main> zip [1,2,3]["1","2","3"]
[(1,"1"),(2,"2"),(3,"3")]

無限リストと有限リストからもzipできる
*Main> zip [1..]["a","b","c"]
[(1,"a"),(2,"b"),(3,"c")]

直角三角形をみつける
タプルとリスト内包表記の組み合わせ

*Main> let triples = [(a,b,c) | c <-[1..10], a <-[1..10], b <-[1..10]]

ピタゴラスの定理を述語として追加する
*Main> let rightTriples = [(a,b,c) | c <-[1..10], a <-[1..10], b <-[1..10], c^2 == a^2 + b^2, c > a, c > b, a > b]
*Main> rightTriples
[(4,3,5),(8,6,10)]
*Main> let rightTriples = [(a,b,c) | c <-[1..10], a <-[1..c], b <-[1..a], c^2 == a^2 + b^2]
*Main> rightTriples
[(4,3,5),(8,6,10)]

*Main> let rightTriples' = [(a,b,c) | c <-[1..10], a <-[1..c], b <-[1..a], c^2 == a^2 + b^2, a+b+c == 24]
*Main> rightTriples'
[(8,6,10)]